[{"id":"b3af17d0.4af2e8","type":"tab","label":"Flow 1","disabled":false,"info":""},{"id":"50f3b79c.c9561","type":"tcp in","z":"b3af17d0.4af2e8","name":"","server":"client","host":"localhost","port":"60002","datamode":"stream","datatype":"utf8","newline":"\\n","topic":"","base64":false,"x":203,"y":280,"wires":[["e34157a1.afaff8"]]},{"id":"946caa89.86fa08","type":"tcp in","z":"b3af17d0.4af2e8","name":"","server":"client","host":"localhost","port":"60001","datamode":"stream","datatype":"utf8","newline":"\\n","topic":"","base64":false,"x":203,"y":240,"wires":[["e34157a1.afaff8"]]},{"id":"df51ca8c.81193","type":"tcp in","z":"b3af17d0.4af2e8","name":"","server":"client","host":"localhost","port":"60003","datamode":"stream","datatype":"utf8","newline":"\\n","topic":"","base64":false,"x":203,"y":320,"wires":[["e34157a1.afaff8"]]},{"id":"e22a7e7f.a93a58","type":"tcp in","z":"b3af17d0.4af2e8","name":"","server":"client","host":"localhost","port":"60004","datamode":"stream","datatype":"utf8","newline":"\\n","topic":"","base64":false,"x":203,"y":360,"wires":[["e34157a1.afaff8"]]},{"id":"72274cbd.977c74","type":"tcp in","z":"b3af17d0.4af2e8","name":"","server":"client","host":"localhost","port":"60005","datamode":"stream","datatype":"utf8","newline":"\\n","topic":"","base64":false,"x":203,"y":400,"wires":[["e34157a1.afaff8"]]},{"id":"e34157a1.afaff8","type":"function","z":"b3af17d0.4af2e8","name":"Parser","func":"const MSTR = \"MOTE# \", TSTR = \"time \", CSTR = \"counter \", DATA = \"data\";\nconst MIN_THRESHOLD = 500, MAX_THRESHOLD = 1000;\n//node.warn(msg.payload);\nif(msg.payload.includes(\"met\")){\n    // Retrieve info from the message passed from the motes\n    let firstIndexOfMote = msg.payload.indexOf(MSTR) + MSTR.length;\n    let from = parseInt(msg.payload\n            .substring(firstIndexOfMote, msg.payload.indexOf(\" \", firstIndexOfMote + 1))\n            .trim()\n            .replace(/\\D/g,''));\n\n    let lastIndexOfMote = msg.payload.lastIndexOf(MSTR) + MSTR.length;\n    let to = parseInt(msg.payload\n            .substring(lastIndexOfMote, msg.payload.indexOf(\" \", lastIndexOfMote + 1))\n            .trim()\n            .replace(/\\D/g,''));\n    \n    /*let indexOfTime = msg.payload.indexOf(TSTR) + TSTR.length;\n    let time = parseInt(msg.payload\n            .substring(indexOfTime, msg.payload.indexOf(\" \", indexOfTime + 1))\n            .trim()\n            .replace(/\\D/g,''));\n    */\n\n    let time = Date.now();\n    let counter = parseInt(msg.payload\n            .substring(msg.payload.lastIndexOf(\" \"))\n            .trim()\n            .replace(/\\D/g,''));\n    node.warn(`msg: ${msg.payload}\\nfrom: ${from}\\nto: ${to}\\ncounter: ${counter}\\ntime: ${time}\\n`);\n    // Get the context data\n    let data = context.get(DATA) || {};\n    let dataId = from < to ? `${from}_${to}` : `${to}_${from}`;\n    // Get the context data relative to that encounter\n    let encounterData = data[dataId] || {};\n    node.warn(encounterData);\n    if(!encounterData.time) {\n        encounterData.counter = 1;\n        encounterData.time = time;\n    } else {\n        if(time < encounterData.time + MIN_THRESHOLD) {\n            // this packet needs to be thrown away as we are already considering the packet coming from the other mote\n            // DO NOTHING\n            // LEAVING THIS HERE FOR FUTURE REFERENCE, CAN BE REFACTORED\n            node.warn(`Doing nothing from ${from} to ${to}`);\n        } else if(time >= encounterData.time + MIN_THRESHOLD && time < encounterData.time + MAX_THRESHOLD) {\n            // perfect message, we can increment the counter\n            node.warn(`incrementing counter from ${encounterData.counter} to ${(encounterData.counter || 0) + 1}`);\n            encounterData.counter = (encounterData.counter || 0) + 1;\n            encounterData.time = time;\n        } else if(time >= encounterData.time + MAX_THRESHOLD) {\n            // the motes have been far away from each other, start over again\n            node.warn(`resetting counter`);\n            encounterData.counter = 1;\n            encounterData.time = time;\n        }\n    }\n    \n    data[dataId] = encounterData;\n    context.set(DATA, data);\n    \n    node.warn(encounterData);\n    \n    if(encounterData.counter >= 10) {\n        msg.payload = {\"value1\" : from, \"value2\": to};\n        msg.event = \"proximity_detected\";\n    }\n}\nreturn msg;","outputs":1,"noerr":0,"x":420,"y":320,"wires":[["8ea183c7.53bf08","f71a4504.71ebc"]]},{"id":"8ea183c7.53bf08","type":"switch","z":"b3af17d0.4af2e8","name":"Debug Switch","property":"event","propertyType":"msg","rules":[{"t":"eq","v":"undefined","vt":"str"},{"t":"neq","v":"undefined","vt":"str"}],"checkall":"true","repair":false,"outputs":2,"x":580,"y":320,"wires":[["6d07fb35.92fcbc"],["7b56acb3.ca73dc"]]},{"id":"6d07fb35.92fcbc","type":"debug","z":"b3af17d0.4af2e8","name":"Debug Sink","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","x":800,"y":180,"wires":[]},{"id":"e9bfb945.fa1c48","type":"http request","z":"b3af17d0.4af2e8","name":"Send POST to IFTTT","method":"POST","ret":"txt","url":"https://maker.ifttt.com/trigger/{{event}}/with/key/bFHjcBZO8AsG4DCDVsZbol","tls":"","x":1120,"y":300,"wires":[[]]},{"id":"7b56acb3.ca73dc","type":"delay","z":"b3af17d0.4af2e8","name":"","pauseType":"delay","timeout":"1","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":820,"y":320,"wires":[["e9bfb945.fa1c48"]]},{"id":"f71a4504.71ebc","type":"debug","z":"b3af17d0.4af2e8","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"debugStr","x":570,"y":120,"wires":[]}]
